This is an outline of what I need to do / my thought process (a scratchpad). Jul 14 2011.

===raw data for docs===
'http://www.broadbandmap.gov/developer/api/almanac-api-ranking-by-geography-type-within-a-state': 
[
u'This API is designed to find the rankings by any geography type within the state with a specific census metric (population or household) and ranking metric (any of the metrics from provider, demographic, technology or speed). Only the top ten and bottom ten rankings would be returned through the API if the result set is greater than 500; otherwise full ranking list be returned.', 

u'http://www.broadbandmap.gov/broadbandmap/almanac/{dataVersion}/rankby/state/{stateId}/{censusMetric}/{rankingMetric}/{geographyType}?properties={properties}&format={format}&callback={functionName}&order={sortOrder}&properties={properties}', 

u'http://www.broadbandmap.gov/broadbandmap/almanac/fall2010/rankby/state/01/population/wirelineproviderequals0/county?format=json&order=asc', 

u'dataVersion - specify the data version for search(no defaults). Examples: fall2010', u'stateId - specify the state fips code within which the ranking should be done', 

u"censusMetricType - specify the census metric by which the data has to be aggregated. It can be either 'population' or 'household'", 

u'rankingMetric - specify one of the various metrics from demographics, technologies, speeds or providers by which the ranking will be done', 

u'geographyType - specify either one of the following geography type: state, censusplace, msa, usf, county, statesenate, statehouse, congdistrict', u"sortOrder - specify 'asc' for ascending order(default) and 'desc' for descending order", u'properties - specify the properties comma delimited to be included in the result', u'format (optional) - valid formats are xml, json, jsonp with default being xml', u'callback (optional) - jsonp callback function name'], 

===massaging for actual function; only required: the urls,===

==expected output data (dictionary) 
['ranking_by_geography_id_within_state', ['dataVersion', 'stateId', 'censusMetricType', 'rankingMetric', 'geographyType', 'geographyId'], 'http://www.broadbandmap.gov/broadbandmap/almanac/{dataVersion}/rankby/state/{stateId}/{censusMetric}/{rankingMetric}/{geographyType}/id/{geographyId}?properties={properties}&format={format}&callback={functionName}&order={sortOrder}&properties={properties}', "\n        This API is designed to find the rankings by geography within the\n        state for a specific metric (population or household) and rank (any of\n        the metrics from provider, demographic, technology or speed). The\n        results are the top ten and bottom ten records within the state for the\n        particular geography type and my area rankings. Additionally we include\n        +/- 5 rankings from the 'my' area rank.\n\n        Call construction:\n        http://www.broadbandmap.gov/broadbandmap/almanac/{dataVersion}/rankby/state/{stateId}/{censusMetric}/{rankingMetric}/{geographyType}/id/{geographyId}?properties={properties}&format={format}&callback={functionName}&order={sortOrder}&properties={properties}\n        Sample call:\n        http://www.broadbandmap.gov/broadbandmap/almanac/fall2010/rankby/state/01/population/wirelineproviderequals0/county/id/01101?format=json&order=asc\n\n        >>> ranking_by_geography_id_within_state('fall2010', '01', 'population',\n        ...    'wirelineproviderequals0', 'county', '01101')\n\n        @see\n        http://www.broadbandmap.gov/developer/api/almanac-api-ranking-by-geography-id-within-a-state\n        "]

==Get params given a URL from the scraped docs
params ['dataVersion', 'stateId', 'censusMetric', 'rankingMetric', 'geographyType', 'geographyId']

urllist ['broadbandmap', 'almanac', '{dataVersion}', 'rankby', 'state', '{stateId}', '{censusMetric}', '{rankingMetric}', '{geographyType}', 'id', '{geographyId}']

====Expected Function====
        self.base_url = 'http://www.broadbandmap.gov/broadbandmap/almanac/'

    def ranking_by_geography_id_within_state(self, dataVersion, stateId, 
            censusMetricType, rankingMetric, geographyType, geographyId, **kwarg):

	self.call_api(dataVersion, 'rankby', 'state', stateId, censusMetricType, rankingMetric,
                geographyType, 'id', geographyId, **kwarg)



For final call:
http://www.broadbandmap.gov/broadbandmap/almanac/fall2010/rankby/state/01/population/wirelineproviderequals0/county/id/01101?format=json&order=asc


===========
OVERALL all urls, base url = http://www.broadbandmap.gov/developer/api
===========
 'almanac_api_ranking_by_geography_type_within_a_state'
 'almanac_api_ranking_by_geography_type_within_the_nation'
 'bip_funding_api_by_state_id'
 'bip_funding_api_by_state_name'

So, create classes. 
Need to map from doc URL to sample call URL.
docURL --
apicallURL --
For each docURL, generate classandfxnName, 
1. then process to create dict, { 'almanac':('by state', 'by state name')}
2. Generate code (classes and methods)
3. Generate documentation. 

Probably easier, though, and faster, to just insert the classes by hand. Yea. So create class GeneralAPI(), autogenerate fxns (with correct API.Almanac.bySTate('tx') format, not the temporary API.almanacAPI_byState('tx') format). Yea. Because would have to reformat ScrapedDocsDict to be nested, which could be ugly. Instead just have simple for each loop.
